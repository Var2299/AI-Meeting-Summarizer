import nodemailer from "nodemailer";

if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
  console.warn(
    "[email.ts] WARNING: EMAIL_USER or EMAIL_PASS is not set. Email sending will fail until credentials are provided."
  );
}

const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

export default transporter;

export async function sendSummaryEmail(
  to: string[],
  subject: string,
  summary: string,
  meetingTitle?: string
): Promise<boolean> {
  if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
    console.error(
      "[email.ts] Missing SMTP credentials (EMAIL_USER/EMAIL_PASS). Aborting send."
    );
    return false;
  }

  try {
    const htmlContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #333;">${
          meetingTitle ? `Meeting Summary: ${meetingTitle}` : "Meeting Summary"
        }</h2>
        <div style="background-color: #f5f5f5; padding: 20px; border-radius: 5px; margin: 20px 0;">
          <pre style="white-space: pre-wrap; font-family: Arial, sans-serif;">${summary}</pre>
        </div>
        <p style="color: #666; font-size: 12px;">
          This summary was generated by AI Meeting Summarizer
        </p>
      </div>
    `;

    const mailOptions = {
      from: process.env.EMAIL_FROM || process.env.EMAIL_USER,
      to: to.join(", "),
      subject: subject,
      html: htmlContent,
    };

    await transporter.sendMail(mailOptions);
    return true;
  } catch (error) {
    console.error("[email.ts] Error sending email:", error);
    return false;
  }
}
